# **STARCH Language Specification v0.1**

## **1. Lexical Structure**

### **1.1 Keywords**
Keywords may be abbreviated to any contiguous subsequence of their letters (minimum 1 character):

**Variable Declaration:** `spud` â†’ `{s, sp, spud, sud, ...}`
**Function Declaration:** `mash` â†’ `{m, ma, mas, mash, msh, ...}`
**Class Declaration:** `bake` â†’ `{b, ba, bak, bake, ...}`
**Return Statement:** `sprout` â†’ `{s, sp, spr, spro, sprout, ...}`
**Harvest (Multi-return):** `harvest` â†’ `{h, ha, har, harv, ...}`
**Immutable:** `fried` â†’ `{f, fr, fri, frie, fried, ...}`
**Unwrap/Strip:** `peel` â†’ `{p, pe, pee, peel, ...}`
**Throw Error:** `roast` â†’ `{r, ro, roa, roast, ...}`

**Control Flow (Standard):**
- `if`, `elif`, `else`
- `for`, `while`
- `break`, `continue`

**Logical:**
- `and`, `or`, `not`

**Special:**
- `mashed` (dictionary/array merge operator)
- `raw` (string prefix for literals)

### **1.2 Operators**

**Arithmetic:** `+`, `-`, `*`, `/`, `%`, `^`

**Comparison:** `==`, `!=`, `<`, `>`, `<=`, `>=`, `â‰ˆ` (approximate equality)

**Logical:** `and`, `or`, `not`

**Concatenation:** `~`

**Pipeline:** `~>`

**Assignment:** `=`, `+=`, `-=`, `*=`, `/=`

**Type Coercion:** `as`

**Default Value:** `or` (in parameters)

### **1.3 Identifiers**
- Start with letter, underscore, or any Unicode letter/emoji
- Continue with letters, digits, underscores, or Unicode characters
- Case-sensitive
- Examples: `potato`, `_value`, `ðŸ¥”`, `nimi_sona`, `cafÃ©`

### **1.4 Literals**

**Integers:** `42`, `-10`, `0xFF` (hex), `0b1010` (binary)

**Floats:** `3.14`, `-0.5`, `2.5e10`

**Strings:**
```starch
"double quotes"
'single quotes'
raw"C:\path\no\escapes"
f"interpolated {variable}"
```

**Booleans:** `true`, `false`

**None:** `null`

**Arrays:** `[1, 2, 3]`, `["a", "b"]`

**Dictionaries:** `{"key": value, "foo": 42}`

**Ranges:** `1..10`, `'a'..'z'`, `0..100..2` (step)

### **1.5 Comments**
```starch
// line comment
# also line comment
<!-- HTML-style -->
[inline comment anywhere]
/* multi-line
   comment */
```

---

## **2. Grammar**

### **2.1 Program Structure**
```
program := statement*

statement := variable_decl
		   | function_decl
		   | class_decl
		   | return_stmt
		   | harvest_stmt
		   | roast_stmt
		   | if_stmt
		   | for_stmt
		   | while_stmt
		   | expression_stmt
```

### **2.2 Variable Declaration**
```
variable_decl := SPUD_KW identifier [':' type] '=' expression [';']

examples:
	s x = 5
	sp name: String = "Edward"
	spud items = [1, 2, 3]
	fried s CONFIG = {"debug": true}
```

### **2.3 Function Declaration**
```
function_decl := MASH_KW identifier '(' param_list ')' ['->' type] ':' block

param_list := [param (',' param)*]
param := identifier [':' type] ['or' expression]

examples:
	m add(a, b):
		sprout a + b
	
	ma greet(name: String or "Guest") -> String:
		sp "Hello, " ~ name
	
	mash process(data: Array, verbose: Bool or false):
		// function body
```

### **2.4 Class Declaration**
```
class_decl := BAKE_KW identifier [':' parent] ':' class_body

class_body := (variable_decl | function_decl)*

examples:
	b Point:
		s x: Float
		s y: Float
		
		m init(x, y):
			self.x = x
			self.y = y
	
	bake Window:
		s title: String
		fried s MAX_WIDTH = 1920
		
		mash render():
			// render logic
```

### **2.5 Return Statement**
```
return_stmt := SPROUT_KW [expression] [';']

examples:
	s 42
	sp x + y
	sprout calculate(data)
```

### **2.6 Harvest Statement (Multi-return)**
```
harvest_stmt := HARVEST_KW expression (',' expression)+ [';']

examples:
	h quotient, remainder
	harvest result, error, status
```

### **2.7 Roast Statement (Exception)**
```
roast_stmt := ROAST_KW expression [';']

examples:
	r "Invalid input"
	roast f"Value {x} out of range"
```

### **2.8 Control Flow**

**If Statement:**
```
if_stmt := 'if' expression ':' block
		   ('elif' expression ':' block)*
		   ['else' ':' block]

examples:
	if x > 10:
		print("big")
	elif x > 5:
		print("medium")
	else:
		print("small")
```

**For Loop:**
```
for_stmt := 'for' identifier 'in' expression ':' block

examples:
	for i in 0..10:
		print(i)
	
	for item in items:
		process(item)
	
	for char in "hello":
		print(char)
```

**While Loop:**
```
while_stmt := 'while' expression ':' block

examples:
	while x < 100:
		x += 1
```

### **2.9 Expressions**

**Primary:**
```
primary := identifier
		 | literal
		 | '(' expression ')'
		 | array_literal
		 | dict_literal
		 | range_expr
```

**Binary Operations:**
```
binary_expr := expression operator expression

operators (precedence high to low):
	**
	*, /, %
	+, -, ~
	==, !=, <, >, <=, >=, â‰ˆ
	and
	or
	mashed
	~>
	as
```

**Unary Operations:**
```
unary_expr := ('not' | '-' | '+') expression
			| PEEL_KW expression

examples:
	not valid
	-x
	p maybe_value
```

**Member Access:**
```
member_expr := expression '.' identifier
			 | expression '[' expression ']'

examples:
	obj.property
	arr[0]
	dict["key"]
	text[1:5]
	items[::-1]
```

**Function Call:**
```
call_expr := expression '(' [arg_list] ')'

arg_list := expression (',' expression)*

examples:
	greet("Edward")
	calculate(10, 20)
	process()
```

**Pipeline:**
```
pipeline_expr := expression '~>' expression

examples:
	data ~> filter(is_valid) ~> map(transform)
```

**Type Coercion:**
```
coercion_expr := expression 'as' type

examples:
	"42" as int
	3.14 as String
```

---

## **3. Type System**

### **3.1 Basic Types**
- `int` - Integer
- `Float` - Floating point
- `String` - Text
- `Bool` - Boolean
- `Array` - Ordered collection
- `Dict` - Key-value pairs
- `null` - Null/None value

### **3.2 Optional Type Hints**
```starch
s x: int = 5              // type hint
s name = "Edward"          // inferred
s items: Array = []        // explicit
```

Types are hints - enforcement happens at runtime, not compile time.

---

## **4. Special Features**

### **4.1 Approximate Equality (`â‰ˆ`)**
```starch
// Numbers: within 10%
if 95 â‰ˆ 100:  // true

// Strings: case-insensitive
if "Edward" â‰ˆ "edward":  // true
```

### **4.2 Pluralization-Aware Functions**
```starch
s potato = load("spud.png")       // loads one file
s potatoes = load("assets/*.png") // loads multiple
```
(Implementation-specific behaviour)

### **4.3 Array/String Operations**
```starch
s text = "hello world"
s words = text.chips()      // ["hello", "world"]
s chars = text.chips("")    // ["h","e","l","l","o"," ","w",...]

s arr = [1,2,3,4,5]
arr[1:3]     // [2,3]
arr[::-1]    // [5,4,3,2,1]
arr[::2]     // [1,3,5]
arr[-1]      // 5 (wraps)
```

### **4.4 Mashed Operator**
```starch
s dict1 = {"a": 1}
s dict2 = {"b": 2}
s combined = dict1 mashed dict2  // {"a": 1, "b": 2}

s arr1 = [1,2]
s arr2 = [3,4]
s merged = arr1 mashed arr2      // [1,2,3,4]
```

---

## **5. Semicolon Rules**

Semicolons are **optional** at end of lines.

Required when:
- Multiple statements on one line: `s x = 5; s y = 10`
